#!/usr/bin/env python3
# vim: set ai et ts=4 sw=4:

import subprocess
import re
import os
import sys

# TODO: support `insert-disk` command
# TODO: support `modify` command
# TODO: support `list-full` command: print cpus, mem_mb, disk_mb
# TODO: use argparse: https://docs.python.org/3/library/argparse.html#sub-commands
# TODO: support cpu affinity

nat_network_name = "VmPyNatNetwork"
nat_network_addr = "10.128.0.0/16"

def usage():
    sys.exit("""Usage:
          vm create <name> <type> <cpus> <mem_mb> <disk_mb> <iso_path>
          vm types
          vm list
          vm start <name>
          vm stop <name>
          vm change-ports <name>
          vm eject-disk <name>
          vm delete <name>
          vm rename <src> <dst>
          vm clone <src> <dst>
          vm export <name> <file.ova>
          vm import <name> <file.ova>
    """)

def sh(cmd):
    """
    Run given bash command, return output, throw exception on error
    """
    return subprocess.check_output(cmd, shell=True).decode('utf-8')


def run(cmd):
    """
    Run given bash command, return error code
    """
    return subprocess.call(cmd, shell=True)


def validate_str(arg):
    if arg is None:
        return None
    if not re.match("""^[A-Za-z0-9_\.-]{1,32}$""", arg):
        sys.exit(
            """Bad argument '{}' - should be [A-Za-z90-9_\.-] and no longer than 32 characters""".format(arg))
    return arg


def validate_num(num):
    if num is None:
        num = ''
    if not re.match("""^[0-9]+$""", num):
        sys.exit("Bad argument '{}' - should be a number".format(num))
    return int(num)


def list_vms():
    all_vms = sh('''VBoxManage.exe list vms | cut -d '"' -f 2''').split("\n")
    all_vms.sort()
    running_vms = set(sh('''VBoxManage.exe list runningvms | cut -d '"' -f 2''').split("\n"))
    print("{:32} {:12}".format("VM", "STATUS"))
    print("-" * (32 + 1 + 12))
    for vm in all_vms:
        if vm == "":
            continue
        status = "powered off"
        if vm in running_vms:
            status = "running"
        print("{:32} {:12}".format(vm, status))

def list_os_types():
    lines = sh('''VBoxManage.exe list ostypes | egrep ^ID''').strip().split("\n")
    vmtypes = []
    for line in lines:
        vmtypes.append(re.search('(\\S+)$', line).group(1))

    vmtypes.sort()
    for vmtype in vmtypes:
        print(vmtype)


def ensure_nat_network_exists():
    code = run("VBoxManage.exe natnetwork list | grep Name | grep {} > /dev/null".format(
        nat_network_name))
    if code != 0:
        print("Creating {} network ({})".format(
            nat_network_name, nat_network_addr))
        sh(("VBoxManage.exe natnetwork add --netname {} --network {} " +
            "--enable --dhcp on --ipv6 off").format(nat_network_name, nat_network_addr))


def get_virtualbox_path():
    line = sh(
        """VBoxManage.exe list systemproperties | grep 'Default machine folder'""").strip()
    path = re.search("""(\\S+)$""", line).group(1)
    if not os.path.isdir(path):
        sys.exit(("get_virtualbox_path() - '{}' is not a directory\n" +
             "Hint: path shouldn't contain whitespaces\n" +
             "Hint: use `VBoxManage.exe setproperty machinefolder /home/user/virtuabox`").format(path))
    return path

def configure_port_forwarding(vm):
    sh("VBoxManage.exe modifyvm {} --nic2 natnetwork --nat-network2 {}".format(vm, nat_network_name))
    sh("VBoxManage.exe modifyvm {} --vrde on".format(vm))
    sh("VBoxManage.exe modifyvm {} --vrdeaddress 127.0.0.1".format(vm))

def create_vm(args):
    name = args[2]  # already validated
    vmtype = args[3]  # already validated
    cpus = validate_num(args[4])
    mem_mb = validate_num(args[5])
    disk_mb = validate_num(args[6])
    iso_path = args[7]
    if not os.path.isfile(iso_path):
        sys.exit("Invalid iso_path '{}' - file doesn't exist".format(iso_path))
    disk_path = get_virtualbox_path() + "/" + name + "/" + name + ".vdi"
    sh("VBoxManage.exe createvm --name {} --ostype {} --register".format(name, vmtype))
    sh(("VBoxManage.exe modifyvm {} --cpus {} --memory {} " +
        "--audio none --usb off --acpi on --boot1 dvd --nic1 nat").format(name, cpus, mem_mb))
    sh("VBoxManage.exe createhd --filename {} --size {}".format(disk_path, disk_mb))
    sh("VBoxManage.exe storagectl {} --name ide-controller --add ide".format(name))
    sh(("VBoxManage.exe storageattach {} --storagectl ide-controller " +
        "--port 0 --device 0 --type hdd --medium {}").format(name, disk_path))
    sh(("VBoxManage.exe storageattach {} --storagectl ide-controller " +
        "--port 0 --device 1 --type dvddrive --medium {}").format(name, iso_path))

    ensure_nat_network_exists()
    sh("VBoxManage.exe modifyvm {} --nic2 natnetwork --nat-network2 {}".format(name, nat_network_name))

    configure_port_forwarding(name)


def main():
    if len(sys.argv) < 2:
        usage()

    args = sys.argv + [None, None, None, None, None, None]
    cmd = validate_str(args[1])
    src = validate_str(args[2])
    dst = args[3]
    if cmd != "import" and cmd != "export":
        dst = validate_str(dst)

    if cmd == "create":
        create_vm(args)
    elif cmd == "list":
        list_vms()
    elif cmd == "types":
        list_os_types()
    elif src is not None and dst is None:
        if cmd == "start":
            sh("VBoxManage.exe startvm --type headless {}".format(src))
        elif cmd == "stop":
            sh("VBoxManage.exe controlvm {} poweroff".format(src))
        elif cmd == "change-ports":
            configure_port_forwarding(src)
        elif cmd == "eject-disk":
            sh(("VBoxManage.exe storageattach {} --storagectl ide-controller " +
                "--port 0 --device 1 --type dvddrive --medium emptydrive").format(src))
        elif cmd == "delete":
            sh("VBoxManage.exe unregistervm {} --delete".format(src))
        else:
            usage()
    elif src is not None and dst is not None:
        if cmd == "rename":
            sh("VBoxManage.exe modifyvm {} --name {}".format(src, dst))
        elif cmd == "clone":
            sh("VBoxManage.exe clonevm {} --name {} --register".format(src, dst))
            configure_port_forwarding(dst)
        elif cmd == "export" or cmd == "import":
            if not re.match('^.*\.ova$', dst):
                sys.exit("Invalid argument '{}' - should be .ova file".format(dst))
            if cmd == "export":
                sh("VBoxManage.exe export {} --output {}".format(src, dst))
            else:
                sh("VBoxManage.exe import {} --vsys 0 --vmname {}".format(dst, src))
                configure_port_forwarding(src)
        else:
            usage()
    else:
        usage()

if __name__ == "__main__":
    main()
